AWSTemplateFormatVersion: "2010-09-09"

Description: DynamoDB Storage Optimization

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Execution Configuration
        Parameters:
          - AthenaWorkgroup
          - AthenaCURDatabase
          - AthenaCURTable
          - OrganizationlUnitIds
          - CronDayOfMonth
          - CronHour
          - CronMinute
      - Label:
          default: Query Configuration
        Parameters:
          - CostColumn
          - AccountIds
          - MinimumSavings
          - PayerIds
          - TableNames
          - RegionNames

Parameters:
  AthenaWorkgroup:
    Type: String
    Default: primary

  AthenaCURDatabase:
    Type: String
    MinLength: 1

  AthenaCURTable:
    Type: String
    MinLength: 1

  OrganizationlUnitIds:
    Type: CommaDelimitedList
    AllowedPattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
    ConstraintDescription: Either Root ID (r-...) or Organizational unit (OU) ID (ou-....-.........)

  CronDayOfMonth:
    Type: String
    Default: "10"
    AllowedPattern: ^(L|LW|(1?[1-9]|[12][0-9]|3[01])W?)$
    ConstraintDescription: "Single day of month (1-31: days of month such as 31 that don't occur in a given month such as February, won't run that month). Check EventBridge Cron documentation"

  CronHour:
    Type: Number
    AllowedValues:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - 19
      - 20
      - 21
      - 22
      - 23
    Default: "0"

  CronMinute:
    Type: Number
    AllowedValues:
      - 0
      - 5
      - 10
      - 15
      - 20
      - 25
      - 30
      - 35
      - 40
      - 45
      - 50
      - 55
    Default: 0

  PricingTerms:
    Description: Price you pay on your invoice (NET) or list price (GROSS). These are often the same.
    Type: String
    AllowedValues:
      - NET
      - GROSS
    Default: NET

  AccountIds:
    Description: Comma serparated list of single quote (') wrapped AWS Account IDs to scan.
    Type: String
    Default: "'ALL'"
    AllowedPattern: ^(('ALL')|('[0-9]{12}'(,'[0-9]{12}')*))$
    ConstraintDescription: Must either be 'ALL' (with the single quotes) or comma separated list of 1 or more 12-digit AWS Account IDs wrapped in single quotes (eg. '111111111111','222222222222')

  MinimumSavings:
    Description: Minimum monthly savings threshold in dollars.
    Type: Number
    Default: 50
    MinValue: 0
    MaxValue: 1000000

  PayerIds:
    Description: Comma serparated list of single quote (') wrapped "Payer" AWS Account IDs.
    Type: String
    Default: "'ALL'"
    AllowedPattern: ^(('ALL')|('[0-9]{12}'(,'[0-9]{12}')*))$
    ConstraintDescription: Must either be 'ALL' (with the single quotes) or comma separated list of 1 or more 12-digit AWS Account IDs wrapped in single quotes (eg. '111111111111','222222222222')

  TableNames:
    Description: Comma serparated list of single quote (') wrapped DynamoDB Table names.
    Type: String
    Default: "'ALL'"
    AllowedPattern: ^(('ALL')|('[a-zA-Z0-9_\-.]{3,255}'(,'[a-zA-Z0-9_\-.]{3,255}')*))$
    ConstraintDescription: Must either be 'ALL' (with the single quotes) or comma separated list of 1 or more DynamoDB Table names wrapped in single quotes (eg. 'Table1','my_other_table')

  RegionNames:
    Description: Comma serparated list of single quote (') wrapped AWS Regions to scan.
    Type: String
    Default: "'ALL'"
    AllowedPattern: ^(('ALL')|('[a-z]{2}-[a-z]+-[0-9]{1,2}'(,'[a-z]{2}-[a-z]+-[0-9]{1,2}')*))$
    ConstraintDescription: Must either be 'ALL' (with the single quotes) or comma separated list of 1 or more AWS Region names wrapped in single quotes (eg. 'us-east-1','il-central-1')

Resources:
  StepFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for DynamoDB Table Class Optimizer's Step Function
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - sns:Publish
            Resource:
              - !GetAtt TableClassUpdaterFunction.Arn
              - !Ref ReportTopic
      Roles:
        - !Ref StepFunctionRole

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for DynamoDB-StorageClass-Optimizer Step Function
      ManagedPolicyArns: # TODO: lock it down
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonAthenaFullAccess

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for DynamoDB-StorageClass-Optimizer Event Bridge
      Policies:
        - PolicyName: InvokeStepFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref DynamoDBOptimizer

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Monthly Trigger of the Step Function that optimizes DynamoDB Table Storage Classes
      ScheduleExpression: !Sub cron(${CronMinute} ${CronHour} ${CronDayOfMonth} * ? *)
      Name: DynamoDB-StorageClass-Optimizer
      State: ENABLED
      Targets:
        - Arn: !Ref DynamoDBOptimizer
          Id: DynamoDBOptimizer
          RoleArn: !GetAtt EventBridgeRole.Arn

  DynamoDBOptimizer:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      Definition:
        QueryLanguage: JSONata
        StartAt: Get Named Query
        States:
          Get Named Query:
            Type: Task
            Resource: !Sub arn:${AWS::Partition}:states:::aws-sdk:athena:getNamedQuery
            Next: Execute Query
            Arguments:
              NamedQueryId: !GetAtt AthenaNamedQuery.NamedQueryId
          Execute Query:
            Type: Task
            Resource: !Sub arn:${AWS::Partition}:states:::athena:startQueryExecution.sync
            Next: Perform Table Class Updates
            Arguments:
              QueryString: "{% $states.input.NamedQuery.QueryString %}"
              WorkGroup: "{% $states.input.NamedQuery.WorkGroup %}"
            Output:
              QueryExecutionId: "{% $states.result.QueryExecution.QueryExecutionId %}"
              QueryOutputLocation: "{% $states.result.QueryExecution.ResultConfiguration.OutputLocation %}"
          Perform Table Class Updates:
            Type: Task
            Resource: !Sub arn:${AWS::Partition}:states:::lambda:invoke
            Output: "{% $states.result.Payload %}"
            Arguments:
              FunctionName: !GetAtt TableClassUpdaterFunction.Arn
              Payload:
                IsDryRun: "{% $states.context.Execution.Input.IsDryRun ? true : false  %}"
                QueryExecutionId: "{% $states.input.QueryExecutionId  %}"
                QueryOutputLocation: "{% $states.input.QueryOutputLocation  %}"
            Next: Were Updates Made
          Were Updates Made:
            Type: Choice
            Choices:
              - Condition: "{%  $reduce($states.input, function($acc, $v) { $acc or $v.updated }, false) or $states.context.Execution.Input.IsDryRun  %}"
                Next: Publish Report
            Default: Success
          Publish Report:
            Type: Task
            Resource: !Sub arn:${AWS::Partition}:states:::sns:publish
            Arguments:
              TopicArn: !Ref ReportTopic
              Subject: '{% ($states.context.Execution.Input.IsDryRun ? "[Dry Run]" : "[Action Required]") & " DynamoDB Table Class Optimizer Execution Report" %}'
              Message: '{%
                $join(
                 $append(
                  ["The DynamoDB Table Class Optimizer completed.\nPlease review the changes and update your Infrastructure as Code if necessary:"],
                  $map($states.input, function($v) {
                   $join([
                    "Region: "        & $v.region,
                    "Account ID: "    & $v.account_id,
                    "Table Name: "    & $v.table_name,
                    "Change: "        & $v.recommendation,
                    "Update Status: " & $v.update_result
                   ], "\n")
                  }
                 )
                ), "\n=====\n")
                %}'
            End: true
          Success:
            Type: Succeed
      RoleArn: !GetAtt StepFunctionRole.Arn
      StateMachineName: DynamoDB-StorageClass-Optimizer
      StateMachineType: STANDARD

  AthenaNamedQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref AthenaCURDatabase
      Description: DynamoDB Storage Class Optimizer
      Name: DynamoDB-StorageClass-Optimizer
      QueryString: !Sub
        - |
          {{ athena_query_string }}
        - AccountIds: !Ref AccountIds
      WorkGroup: !Ref AthenaWorkgroup

  RoleStackSet:
    DeletionPolicy: Retain
    Type: AWS::CloudFormation::StackSet
    Properties:
      StackSetName: DynamoDBOptimizerChildAccount
      Description: Resources for Child Accounts for the DynamoDB Table Class Optimizer
      PermissionModel: SERVICE_MANAGED
      AutoDeployment:
        Enabled: True
        RetainStacksOnAccountRemoval: False
      StackInstancesGroup:
        - Regions:
            - us-east-1
          DeploymentTargets:
            OrganizationalUnitIds: !Ref OrganizationlUnitIds
      Capabilities:
        - CAPABILITY_NAMED_IAM
      TemplateBody: !Sub |
        AWSTemplateFormatVersion: '2010-09-09'
        Resources:
          LambdaRole:
            Type: AWS::IAM::Role
            Properties:
              AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    AWS: "${LambdaRole.Arn}"
                  Action: sts:AssumeRole
              Description: Role for DynamoDB-StorageClass-Optimizer in child account
              Policies:
              - PolicyName: DynamoDBStorageClassOptimizer
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                  - Effect: Allow
                    Action:
                    - dynamodb:UpdateTable
                    - dynamodb:DescribeTable
                    Resource:
                    - Fn::Sub: arn:${!AWS::Partition}:dynamodb:*:${!AWS::AccountId}:table/*
              RoleName: DynamoDBStorageClassOptimizer

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for DynamoDB-StorageClass-Optimizer Lambda
      ManagedPolicyArns: # TODO: lock it down
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: AssumeRoleOnChildAccounts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - athena:GetQueryResults
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::*:role/DynamoDBStorageClassOptimizer
                  - !Sub arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroup}

  TableClassUpdaterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          {{ lambda_handler_code }}
      Description: Performs the DynamoDB Table Class Updates
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.13
      Timeout: 60

  ReportTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DynamoDB-StorageClass-Optimizer-Reports
